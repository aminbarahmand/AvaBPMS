// <auto-generated />
using System;
using AvaBPMS.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AvaBPMS.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AvaBPMS.Domain.Lane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasMaxLength(50)
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PoolId")
                        .HasColumnType("int");

                    b.Property<string>("RelatedRoleId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RelatedUserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("PoolId");

                    b.ToTable("LaneList");
                });

            modelBuilder.Entity("AvaBPMS.Domain.Pool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasMaxLength(50)
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("PoolList");
                });

            modelBuilder.Entity("AvaBPMS.Domain.Transition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Command")
                        .HasColumnType("int");

                    b.Property<int>("NextWorkFlowNodeId")
                        .HasColumnType("int");

                    b.Property<double?>("NodeValue")
                        .HasColumnType("float");

                    b.Property<int>("SourceWorkFlowNodeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("TransitionCondition")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NextWorkFlowNodeId");

                    b.HasIndex("SourceWorkFlowNodeId");

                    b.ToTable("TransitionList");
                });

            modelBuilder.Entity("AvaBPMS.Domain.WorkFlowInstanse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PoolId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PoolId");

                    b.ToTable("WorkFlowInstanseList");
                });

            modelBuilder.Entity("AvaBPMS.Domain.WorkFlowNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LaneId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasMaxLength(50)
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("WorkFlowNodeType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LaneId");

                    b.ToTable("WorkFlowNodeList");
                });

            modelBuilder.Entity("AvaBPMS.Domain.WorkFlowStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsALive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReceiveDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("StepValue")
                        .HasColumnType("float");

                    b.Property<int>("TransitionId")
                        .HasColumnType("int");

                    b.Property<int>("WorkFlowInstanseId")
                        .HasColumnType("int");

                    b.Property<int>("WorkFlowNodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkFlowInstanseId");

                    b.HasIndex("WorkFlowNodeId");

                    b.ToTable("WorkFlowStepList");
                });

            modelBuilder.Entity("AvaBPMS.Domain.Lane", b =>
                {
                    b.HasOne("AvaBPMS.Domain.Pool", "Pool")
                        .WithMany("LaneList")
                        .HasForeignKey("PoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pool");
                });

            modelBuilder.Entity("AvaBPMS.Domain.Transition", b =>
                {
                    b.HasOne("AvaBPMS.Domain.WorkFlowNode", "NextWorkFlowNode")
                        .WithMany("NextTransitionList")
                        .HasForeignKey("NextWorkFlowNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AvaBPMS.Domain.WorkFlowNode", "SourceWorkFlowNode")
                        .WithMany("SourceTransitionList")
                        .HasForeignKey("SourceWorkFlowNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("NextWorkFlowNode");

                    b.Navigation("SourceWorkFlowNode");
                });

            modelBuilder.Entity("AvaBPMS.Domain.WorkFlowInstanse", b =>
                {
                    b.HasOne("AvaBPMS.Domain.Pool", "Pool")
                        .WithMany()
                        .HasForeignKey("PoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pool");
                });

            modelBuilder.Entity("AvaBPMS.Domain.WorkFlowNode", b =>
                {
                    b.HasOne("AvaBPMS.Domain.Lane", "Lane")
                        .WithMany("WorkFlowNodeList")
                        .HasForeignKey("LaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lane");
                });

            modelBuilder.Entity("AvaBPMS.Domain.WorkFlowStep", b =>
                {
                    b.HasOne("AvaBPMS.Domain.WorkFlowInstanse", "WorkFlowInstanse")
                        .WithMany("WorkFlowStepList")
                        .HasForeignKey("WorkFlowInstanseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvaBPMS.Domain.WorkFlowNode", "WorkFlowNode")
                        .WithMany("WorkFlowStepList")
                        .HasForeignKey("WorkFlowNodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WorkFlowInstanse");

                    b.Navigation("WorkFlowNode");
                });

            modelBuilder.Entity("AvaBPMS.Domain.Lane", b =>
                {
                    b.Navigation("WorkFlowNodeList");
                });

            modelBuilder.Entity("AvaBPMS.Domain.Pool", b =>
                {
                    b.Navigation("LaneList");
                });

            modelBuilder.Entity("AvaBPMS.Domain.WorkFlowInstanse", b =>
                {
                    b.Navigation("WorkFlowStepList");
                });

            modelBuilder.Entity("AvaBPMS.Domain.WorkFlowNode", b =>
                {
                    b.Navigation("NextTransitionList");

                    b.Navigation("SourceTransitionList");

                    b.Navigation("WorkFlowStepList");
                });
#pragma warning restore 612, 618
        }
    }
}
